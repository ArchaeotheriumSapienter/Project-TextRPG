"""
File: rpgame.py
-------------------------
This is a simple RPG program where a player can choose various actions and fight enemies

Milestone:
1. Prompt welcome message - done
2. Input Name - done
2. Finish introduction - done
3. Create character - done
4. Make character move, attack, defend
    a. make a set of moves that a player can do:
        - move
        - attack
        -
5. Make an enemy
6. Make enemy fight the character
"""

import random  # used for the dice
import sys  # used for the text effect
import time  # used to delay the texts for a few miliseconds

BOSS_NAME = '⊑⟒⍀?'


# -----------------------
# Main Function
# -----------------------


def main():
    # user_name = welcome_message_and_introduction()
    # first_chapter()
    player_commands()


# -----------------------
# Functions From Main
# -----------------------


def welcome_message_and_introduction():
    """
    Welcome message for the user to see and asks the user whether to start the game or not
    Return: user_name
    """
    type_print_effect("Welcome to the Journey.\n")
    time.sleep(0.5)
    type_print_effect('You are an adventurer that suddenly woke up without any recollection.\n')
    time.sleep(0.5)
    type_print_effect('Now you must understand what happened before you came to this place.\n')
    time.sleep(0.5)

    # Asks the user for an input and the input of the user is turned into a lowercase to clean data
    user_enter_introduction = input('Type y to start or n to end the game ')
    user_enter_introduction_lowercase = user_enter_introduction.lower()

    # If argument with the user's choices, if n, it will exit the program, anything other than y or n will
    # be taken as a sign to end the game, and y will prompt to start the introduction function
    if user_enter_introduction_lowercase == 'y':
        # we got the username from the introduction that is why we put introduction in a
        # variable
        inputted_user_name = introduction()
    elif user_enter_introduction_lowercase == 'n':
        sys.exit()
    else:
        print('Invalid input. I assume you will exit the game. Thank you for playing!')
        sys.exit()

    return inputted_user_name


# def first_chapter():


# -----------------------
# Helper Functions
# -----------------------

#  kulang pa dito YUNG WEAPONS LAGYAN MO MAMAYA
def introduction():
    """
    Opening dialogue with Alicia, the first character that the player saw, she will guide the player to the dojo
    Pre-condition: Player starts the game
    Post-condition: Player has a name and is headed for the dojo
    """
    print('')  # For spacing from the start menu
    type_print_effect("Hey, wake up! Are you okay? Who are you? And what are you doing near my home!\n")
    time.sleep(0.5)
    type_print_effect("Oh my, you have so many bruises! Let me tend your wounds and then let's talk.\n")
    time.sleep(0.5)
    type_print_effect("I'm Alicia by the way, its a good thing I found you here,\n")
    time.sleep(0.5)
    type_print_effect("there isn't any hospitals or clinic here for hundreds of kilometers.\n")
    time.sleep(0.5)
    type_print_effect("The best bet you have right now is me, good thing I have a first aid kit.\n")
    time.sleep(0.5)

    #  Ask the player for their name
    inputted_user_name = input_print_effect("I forgot to even ask! What's your name? ")

    time.sleep(0.5)
    type_print_effect("That's a nice name, " + inputted_user_name + "\n")
    time.sleep(0.5)
    type_print_effect("There we go, I patched your wounds. The problem now is where would you go?\n")
    time.sleep(0.5)
    type_print_effect("And do you remember how you got here? Or who you are?\n")
    time.sleep(0.5)
    type_print_effect("Hey! What's that in your shoulder, I guess I missed a wound.\n")
    time.sleep(0.5)
    type_print_effect("...\n")
    time.sleep(0.5)
    type_print_effect("You're one of them!!! I can't believe it. How did you wind up here? In the middle of nowhere?\n")
    time.sleep(0.5)
    type_print_effect("You're here to defeat " + BOSS_NAME + "\n")
    time.sleep(0.5)
    type_print_effect("But you can't! You'll get yourself killed!\n")
    time.sleep(0.5)
    type_print_effect("But if you're one of them, I guess you're destined towards that goal? Destiny is so weird\n")
    time.sleep(0.5)
    type_print_effect("I mean, who gets to decide what you should do? Is it the player? I guess not...\n")
    time.sleep(0.5)
    type_print_effect("The player is only looking at the screen right now, just watching our whole conversation.\n")
    time.sleep(0.5)
    type_print_effect("Anyway, since I can see that you're one of them, I believe you can still remember how to "
                      "fight?\n")
    time.sleep(0.5)
    type_print_effect("Or how to use your power? I want to see how you release your power!\n")
    time.sleep(0.5)
    type_print_effect("...\n")
    time.sleep(0.5)
    type_print_effect("Don't you rememeber anything? Come on, just one move!\n")
    time.sleep(0.5)
    type_print_effect("...\n")
    time.sleep(0.5)
    type_print_effect("Oh my, if that's the case, I think you should go to the nearby dojo. The sensei there would"
                      " help you remember the once you've lost\n")
    time.sleep(0.5)
    type_print_effect("Before you go! I'll give you this to defend yourself. It's no longer safe ever since we've"
                      " left Earth.\n")
    time.sleep(0.5)
    type_print_effect("Goodluck out there " + inputted_user_name + "\n")

    #  return the user_name to be used in the entirety of the program
    return inputted_user_name


# -----------------------
# Sub-Helper Functions
# -----------------------

def type_print_effect(text):
    """
    This function takes print strings and change them to have a typing effect with the help of time
    sleep so that it has a delay, much like when someone is typing

    Parameter: text - the inputted text where it would be converted to a typing effect
    """

    for character in text:
        print(character, end='')
        sys.stdout.flush()
        time.sleep(0.001)  # 0.05 normal speed


def input_print_effect(text):
    """
    This function is the same with text_print_effect, the difference is that this is used
    when a user inputs something and a message is prompted

    :param: text - the message with the input from the user
    :return: value - the answer that the user gave to be used by other functions
    """
    for character in text:
        print(character, end='')
        sys.stdout.flush()
        time.sleep(0.001)  # 0.05 normal speed
    value = input()
    return value


# -----------------------
# Player Commands
# -----------------------

def player_commands():
    """
    All commands that the player can do
    """
    print('What action do you want to do? We have the following')

    # list of commands that the player can do
    #command = {
        #'a': attack(),
        #'b': move(),
        #'c': 'status()',
        #'d': help_game(),
        #'e': quit_game()
    #}

    # asks player for the command that they want to do
    player_actions = input("Please press the appropriate letter for the command that you want to do ")

    # sanitizing the input by putting it in lowercase
    player_actions_lowercase = player_actions.lower()

    if player_actions_lowercase == 'a':
        attack()
    elif player_actions_lowercase == 'b':
        move()
    elif player_actions_lowercase == 'c':
        print('status()')
    elif player_actions_lowercase == 'd':
        help_game()
    elif player_actions_lowercase == 'e':
        quit_game()


def attack():
    """
    Player attack with random integer as its damage
    """
    attack_damage = random.randint(1, 10)
    print("user has attacked enemy with", attack_damage, "damage!")


def move():
    """
    Function when a player moves, uses random integer to determine the number of steps the player takes
    """
    number_of_moves = random.randint(1, 10)
    print("user has moved", number_of_moves, "steps")


def help_game():
    """
    Function about all the information that the player wants to know
    """
    #  Dictionary when the player chooses 'a' which is a help desk for commands
    commands = {
                   'a': 'attack()',
                   'b': 'move()',
                   'c': 'status()',
                   'd': 'help_game()',
                   'e': 'quit_game()'
               },

    print("What do you want to know about?")

    #  Dictionary of information that the player can access
    help_list = {
        'a': "Commands",
        'b': 'Enemies'}

    # for the user to see
    print(help_list)

    # asks the user which topic do they need help with
    player_chosen_help_command = input('What do you want to choose? ')

    # lowercase for sanitation
    player_chosen_help_command_lowercase = player_chosen_help_command.lower()

    # if statement to implement what the player has chosen from
    if player_chosen_help_command_lowercase == 'a':
        print(commands)
        #  subset for the user to be asked what specific command they want to know
        player_chosen_help_specific_command = input('What command do you want to learn more? ')

        # lowecase sanitation
        player_chosen_help_specific_command_lowercase = player_chosen_help_specific_command.lower()

        if player_chosen_help_specific_command_lowercase == 'a':
            print('Command player attack')

        print(commands)


def quit_game():
    """
    Command that will quit the game when the player wants to
    """
    #  Asks the player if they want to quit for a second time to make sure it was not a mistake
    ask_player_again = input("Are you sure you want to exit? (Type y for yes, n for no) ")

    # Change their response to lowercase for cleaner code
    ask_player_again_lowercase = ask_player_again.lower()

    if ask_player_again_lowercase == 'y':
        print('Thank you for playing my game! I hope you enjoyed my first ever Programming Project.')
        sys.exit()
    elif ask_player_again_lowercase == 'n':
        player_commands()
        print('')  # for spacing in the terminal
    else:
        print("Invalid input")
        player_commands()
        print('')  # for spacing in the terminal


# -----------------------
# No Need For Editing
# -----------------------


if __name__ == '__main__':
    main()
